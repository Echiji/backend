# ==================== CONFIGURATION DE LA BASE DE DONNÉES ====================
# URL de connexion à PostgreSQL avec variables d'environnement
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/emaildb}
# Nom d'utilisateur de la base de données
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
# Mot de passe de la base de données
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
# Pilote JDBC pour PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# ==================== CONFIGURATION JPA/HIBERNATE ====================
# Mode de génération du schéma de base de données (none = pas de modification automatique)
spring.jpa.hibernate.ddl-auto=none
# Affichage des requêtes SQL dans les logs (utile pour le débogage)
spring.jpa.show-sql=true
# Formatage des requêtes SQL pour une meilleure lisibilité
spring.jpa.properties.hibernate.format_sql=true
# Dialecte Hibernate pour PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ==================== CONFIGURATION DU SERVEUR ====================
# Port sur lequel le serveur Spring Boot écoute
server.port=8080

# ==================== CONFIGURATION DES EMAILS (SMTP) ====================
# Serveur SMTP pour l'envoi d'emails (Gmail)
spring.mail.host=smtp.gmail.com
# Port SMTP avec TLS
spring.mail.port=587
# Adresse email d'envoi
spring.mail.username=${SPRING_MAIL_USERNAME:laquay.jerome@gmail.com}
# Mot de passe d'application Gmail (pas le mot de passe principal)
spring.mail.password=${SPRING_MAIL_PASSWORD:kbbv jnyq nqos pepx}
# Activation de l'authentification SMTP
spring.mail.properties.mail.smtp.auth=true
# Activation du chiffrement TLS
spring.mail.properties.mail.smtp.starttls.enable=true

# ==================== CONFIGURATION IMAP (RÉCEPTION D'EMAILS) ====================
# Serveur IMAP pour la réception d'emails (Gmail)
spring.mail.properties.mail.imap.host=imap.gmail.com
# Port IMAP avec SSL
spring.mail.properties.mail.imap.port=993
# Activation du chiffrement SSL
spring.mail.properties.mail.imap.ssl.enable=true
# Confiance en tous les certificats SSL (développement uniquement)
spring.mail.properties.mail.imap.ssl.trust=*
# Protocole TLS utilisé
spring.mail.properties.mail.imap.ssl.protocols=TLSv1.2

# ==================== CONFIGURATION OPENAI ====================
# Clé API OpenAI pour l'intégration IA
openai.api.key=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

# ==================== CONFIGURATION DES PIÈCES JOINTES ====================
# Répertoire local pour stocker les pièces jointes des emails
app.attachments.directory=./attachments

# ==================== CONFIGURATION DE SÉCURITÉ ====================
# Utilisateur par défaut pour Spring Security (développement uniquement)
spring.security.user.name=admin
spring.security.user.password=admin
spring.security.user.roles=ADMIN

# Désactivation de la sécurité pour le développement
spring.security.enabled=false
# Configuration OAuth2 JWT (non utilisée actuellement)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/.well-known/jwks.json
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080

# ==================== CONFIGURATION CORS ====================
# Autorisation de toutes les origines pour les requêtes CORS
spring.web.cors.allowed-origins=*
# Méthodes HTTP autorisées
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# En-têtes HTTP autorisés
spring.web.cors.allowed-headers=*
# Autorisation des cookies et informations d'authentification
spring.web.cors.allow-credentials=true 